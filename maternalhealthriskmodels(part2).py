# -*- coding: utf-8 -*-
"""MaternalHealthRiskModels(part2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gHzN-L3JG4hjR2p7Tw8fO2hkgq8KS1xl

# Clean and PreProcess
"""

import pandas as pd

github_url = 'https://raw.githubusercontent.com/marymorkos/maternalmortalityhealthriskdata/main/Maternal%20Health%20Risk%20Data%20Set%204.csv'
maternalhealth_df = pd.read_csv(github_url)

maternalhealth_df.head()

##Age: Age in years when a woman is pregnant.
##SystolicBP: Upper value of Blood Pressure in mmHg, another significant attribute during pregnancy.
##DiastolicBP: Lower value of Blood Pressure in mmHg, another significant attribute during pregnancy.
##BS: Blood glucose levels is in terms of a molar concentration, mmol/L.
##HeartRate: A normal resting heart rate in beats per minute.
##Risk Level: Predicted Risk Intensity Level during pregnancy considering the previous attribute.

# Check for missing values
print("Missing values:\n", maternalhealth_df.isnull().sum())

import numpy as np

numerical_cols = maternalhealth_df.select_dtypes(include=np.number).columns
maternalhealth_df[numerical_cols] = maternalhealth_df[numerical_cols].fillna(maternalhealth_df[numerical_cols].mean())

print("Missing values after filling with average:\n", maternalhealth_df.isnull().sum())

print("Duplicate rows:\n", maternalhealth_df.duplicated().sum())

maternalhealth_df.head()

"""# Visualize what we have"""

import seaborn as sns
import matplotlib.pyplot as plt

# Create a boxplot to visualize the distribution of 'type' variable
plt.figure(figsize=(10, 6))
sns.boxplot(x='RiskLevel', y='BS', data=maternalhealth_df)
plt.xlabel('Risk Level')
plt.ylabel('Blood Sugar')
plt.title('Distribution of Blood Sugar and Pregnancy Risk Level')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.grid(True)  # Add grid for better readability
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x='RiskLevel', y='Age', data=maternalhealth_df)
plt.xlabel('Risk Level')
plt.ylabel('Age')
plt.title('Distribution of Age and Pregnancy Risk Level')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(x='RiskLevel', data=maternalhealth_df)
plt.xlabel('Risk Level')
plt.ylabel('Count')
plt.title('Distribution of Risk Levels')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.show()

"""# Prediction One: Random Forest Classifier"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

# Split data into predictors (X) and target (y)
X = maternalhealth_df.drop(columns=['RiskLevel'])
y = maternalhealth_df['RiskLevel']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# Calculate accuracy score
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Create confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_matrix)

plt.figure(figsize=(10, 8))
sns.heatmap(conf_matrix, annot=True, cmap='Blues', fmt='d', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix')
plt.show()

"""# Feature Importance"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Split data into predictors (X) and target (y)
X = maternalhealth_df.drop(columns=['RiskLevel'])
y = maternalhealth_df['RiskLevel']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Calculate accuracy score
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

feature_importances = model.feature_importances_

# Create a DataFrame to store feature importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importances})

# Sort the DataFrame by importance
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=feature_importance_df)
plt.xlabel('Importance')
plt.ylabel('Feature')
plt.title('Feature Importances')
plt.show()

"""# Logistic Regression"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

maternalhealth_df.head()

# Splitting data into training and testing sets
X = maternalhealth_df[['Age', 'SystolicBP', 'DiastolicBP', 'BodyTemp', 'BS', 'HeartRate']]
y = maternalhealth_df['RiskLevel']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix, classification_report

cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.title('Confusion Matrix')
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.show()

report = classification_report(y_test, y_pred)

print("Classification Report:")
print(report)
##bird species is encoded
##Swimming Birds 0
##Wading Birds 1
##Terrestrial Birds 2
##Raptors 3
##Scansorial Birds 4
##Singing Birds 5

"""# Preditction Two: Linear Regression"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(8, 6))
sns.histplot(maternalhealth_df['BS'], bins=20, kde=True)
plt.title('Distribution of Blood Sugar (BS)')
plt.xlabel('Blood Sugar')
plt.ylabel('Frequency')
plt.show()

##create yo model
predictors = ['Age', 'SystolicBP', 'DiastolicBP', 'BodyTemp', 'HeartRate']
target = 'BS'

##yess split it up
X_train, X_test, y_train, y_test = train_test_split(maternalhealth_df[predictors], maternalhealth_df[target], test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("Mean Squared Error (MSE):", mse)
print("R-squared (R^2) Score:", r2)

coefficients = pd.Series(model.coef_, index=predictors)
print("\nCoefficients:")
print(coefficients)

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Blood Sugar Levels")
plt.ylabel("Predicted Blood Sugar Levels")
plt.title("Actual vs. Predicted Blood Sugar Levels")
plt.show()

"""# Classifier Tree"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
from sklearn.tree import plot_tree

github_url = 'https://raw.githubusercontent.com/marymorkos/maternalmortalityhealthriskdata/main/Maternal%20Health%20Risk%20Data%20Set%204.csv'
maternal_df = pd.read_csv(github_url)

X = maternal_df.drop(columns=['RiskLevel'])
y = maternal_df['RiskLevel']

label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

plt.figure(figsize=(20,10))
plot_tree(clf, filled=True, feature_names=X.columns, class_names=label_encoder.classes_)
plt.show()

clf = DecisionTreeClassifier(max_depth=3, random_state=42)  # Adjusted max_depth to 2
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

plt.figure(figsize=(10,6))
plot_tree(clf, filled=True, feature_names=X.columns, class_names=label_encoder.classes_)
plt.show()

"""# Tuning and Validation"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import cross_val_score, KFold, GridSearchCV
from sklearn.feature_selection import RFE
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder

github_url = 'https://raw.githubusercontent.com/marymorkos/maternalmortalityhealthriskdata/main/Maternal%20Health%20Risk%20Data%20Set%204.csv'
maternalhealth_df = pd.read_csv(github_url)

numerical_cols = maternalhealth_df.select_dtypes(include=np.number).columns
maternalhealth_df[numerical_cols] = maternalhealth_df[numerical_cols].fillna(maternalhealth_df[numerical_cols].mean())

print("Missing values after filling with average:\n", maternalhealth_df.isnull().sum())

label_encoder = LabelEncoder()
maternalhealth_df['RiskLevel'] = label_encoder.fit_transform(maternalhealth_df['RiskLevel'])

# Separate features and target variable
X = maternalhealth_df.drop(columns=['BS', 'RiskLevel'])
y = maternalhealth_df['RiskLevel']

model = RandomForestClassifier(random_state=42)
cv = KFold(n_splits=5, shuffle=True, random_state=42)
cv_scores = cross_val_score(model, X, y, cv=cv)
print("Cross-validation scores:", cv_scores)

rfe = RFE(estimator=model, n_features_to_select=5, step=1)
rfe.fit(X, y)
selected_features = np.array(X.columns)[rfe.support_]
print("Selected features:", selected_features)

param_grid = {
    'n_estimators': [50, 100, 150],
    'max_depth': [None, 5, 10]
}

grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=cv)
grid_search.fit(X, y)

means = grid_search.cv_results_['mean_test_score']
params = grid_search.cv_results_['params']

plt.figure(figsize=(10, 6))
for mean, param in zip(means, params):
    plt.scatter(param['n_estimators'], param['max_depth'], c=mean, cmap='viridis', s=100, edgecolors='k')

plt.colorbar(label='Mean Test Score')
plt.xlabel('n_estimators')
plt.ylabel('max_depth')
plt.title('Grid Search Results')
plt.show()

n_estimators_values = sorted(list(set(param['n_estimators'] for param in params)))
max_depth_values = sorted(list(set(param['max_depth'] for param in params if param['max_depth'] is not None))) + ['None']
mean_scores_matrix = np.array(means).reshape(len(max_depth_values), len(n_estimators_values))

# Create heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(mean_scores_matrix, annot=True, cmap='viridis', xticklabels=n_estimators_values, yticklabels=max_depth_values)
plt.xlabel('n_estimators')
plt.ylabel('max_depth')
plt.title('Grid Search Results - Mean Test Score')
plt.show()
print("Mean Scores Matrix:")
print(mean_scores_matrix)