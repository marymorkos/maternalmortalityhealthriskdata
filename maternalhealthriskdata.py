# -*- coding: utf-8 -*-
"""MaternalHealthRiskData.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14IqEW8sn54IHkJEPRsXovjZkEU-CGR_4
"""

import pandas as pd

github_url = 'https://raw.githubusercontent.com/marymorkos/maternalmortalityhealthriskdata/main/Maternal%20Health%20Risk%20Data%20Set%204.csv'
maternal_df = pd.read_csv(github_url)

print(maternal_df.head())

print(maternal_df.dtypes)

print(maternal_df.isnull().sum())

print(maternal_df.duplicated().sum())

print(maternal_df.describe())

float_columns = ['BS', 'BodyTemp']
maternal_df[float_columns] = maternal_df[float_columns].astype(int)

maternal_df['RiskLevel'].replace({'low': 1, 'mid': 2, 'high': 3}, inplace=True)

"""# KNN"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

X = maternal_df.drop(columns=['RiskLevel'])
y = maternal_df['RiskLevel']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

knn = KNeighborsClassifier(n_neighbors=5)

knn.fit(X_train_scaled, y_train)

y_pred = knn.predict(X_test_scaled)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

"""# PCA"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

X = maternal_df.drop(columns=['RiskLevel'])
y = maternal_df['RiskLevel']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

sns.pairplot(maternal_df, hue='RiskLevel', markers=["o", "s", "D"], palette="Set1")
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# Separate features and target variable
X = maternal_df.drop(columns=['RiskLevel'])
y = maternal_df['RiskLevel']

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Perform PCA
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

# Create a DataFrame for the PCA results
pca_df = pd.DataFrame(data=X_pca, columns=['PC1', 'PC2'])
pca_df['RiskLevel'] = y

# Plot PCA results
plt.figure(figsize=(10, 6))
sns.scatterplot(data=pca_df, x='PC1', y='PC2', hue='RiskLevel', palette='Set1', markers=["o", "s", "D"])
plt.title('PCA Visualization of Risk Levels')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.legend(title='Risk Level')
plt.grid(True)
plt.show()

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

"""# Linear Regression"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import LabelEncoder
import pandas as pd

maternal_df.head()

X = maternal_df.drop(columns=['RiskLevel'])

label_encoder = LabelEncoder()
y = label_encoder.fit_transform(maternal_df['RiskLevel'])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

rmse = mean_squared_error(y_test, y_pred, squared=False)
print("Root Mean Squared Error (RMSE):", rmse)

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='pink', alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel('Actual RiskLevel')
plt.ylabel('Predicted RiskLevel')
plt.title('Actual vs Predicted RiskLevel')
plt.show()

X = maternal_df[['Age']]
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(maternal_df['RiskLevel'])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

rmse = mean_squared_error(y_test, y_pred, squared=False)
print("Root Mean Squared Error (RMSE):", rmse)

plt.figure(figsize=(8, 6))
plt.scatter(X_test, y_test, color='pink', label='Actual', alpha=0.5)
plt.scatter(X_test, y_pred, color='blue', label='Predicted', alpha=0.5)
plt.xlabel('Age')
plt.ylabel('RiskLevel')
plt.title('Actual vs Predicted Risk Level for Age')
plt.legend()
plt.show()

"""# Logistic Regression"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
import pandas as pd

X = maternal_df.drop(columns=['RiskLevel'])
y = maternal_df['RiskLevel']

label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

log_reg_model = LogisticRegression(max_iter=100)
log_reg_model.fit(X_train, y_train)

y_pred = log_reg_model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='pink', xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix')
plt.show()

"""# Neural Network"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

X = maternal_df.drop(columns=['RiskLevel'])
y = maternal_df['RiskLevel']

label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = Sequential()

model.add(Dense(16, activation='relu'))

model.add(Dense(3, activation='softmax'))

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))

_, accuracy = model.evaluate(X_test, y_test)
print("Accuracy:", accuracy)

plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

"""# Classification Tree"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
from sklearn.tree import plot_tree

X = maternal_df.drop(columns=['RiskLevel'])
y = maternal_df['RiskLevel']

label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

clf = DecisionTreeClassifier(random_state=42)

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

plt.figure(figsize=(20,10))
plot_tree(clf, filled=True, feature_names=X.columns, class_names=label_encoder.classes_)
plt.show()

plt.figure(figsize=(20,10))
plot_tree(clf, filled=True, feature_names=X.columns, class_names=label_encoder.classes_, max_depth=2)
plt.show()

"""# Time Series joke"""

import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

age_series = maternal_df['Age']

train_size = int(len(age_series) * 0.8)
train_data, test_data = age_series[:train_size], age_series[train_size:]

model = ARIMA(train_data, order=(5,1,0))
model_fit = model.fit()

predictions = model_fit.forecast(steps=len(test_data))

mse = mean_squared_error(test_data, predictions)
print("Mean Squared Error:", mse)

plt.plot(age_series, label='Original Data')
plt.plot(test_data.index, predictions, color='red', label='Predictions')
plt.xlabel('Time')
plt.ylabel('Age')
plt.title('Age Time Series Forecast')
plt.legend()
plt.show()

"""# Correlation Matrix"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

maternal_df_numeric = maternal_df.drop(columns=['RiskLevel'])

correlation_matrix = maternal_df_numeric.corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Matrix of Maternal Health Features')
plt.show()

# Extract upper triangle of correlation matrix (excluding diagonal)
upper_triangle = correlation_matrix.where(np.triu(np.ones(correlation_matrix.shape), k=1).astype(bool))

# Find the most correlated pairs
most_correlated_pairs = upper_triangle.unstack().sort_values(ascending=False)

# Print the most correlated pairs
print("Most correlated pairs of features:")
print(most_correlated_pairs.head(10))