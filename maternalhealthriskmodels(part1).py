# -*- coding: utf-8 -*-
"""MaternalHealthRiskModels(part1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UY2nkVCuOwsKS6wqbg1vKMfJcLI8UPg5

# Import, Clean, Preprocess
"""

import pandas as pd

github_url = 'https://raw.githubusercontent.com/marymorkos/maternalmortalityhealthriskdata/main/Maternal%20Health%20Risk%20Data%20Set%204.csv'
maternal_df = pd.read_csv(github_url)

print(maternal_df.isnull().sum())

maternal_df.dropna(inplace=True)

print(maternal_df.duplicated().sum())

maternal_df.drop_duplicates(inplace=True)

maternal_df_encoded = pd.get_dummies(maternal_df, columns=['RiskLevel'])

"""# Visualize"""

import matplotlib.pyplot as plt
plt.hist(maternal_df['Age'], bins=20)
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title('Distribution of Age')
plt.show()

import seaborn as sns
plt.figure(figsize=(8, 6))
sns.boxplot(x='RiskLevel', y='SystolicBP', data=maternal_df)
plt.xlabel('Risk Level')
plt.ylabel('Systolic Blood Pressure')
plt.title('Distribution of Systolic BP by Risk Level')
plt.show()

"""# Prediction One(1): Random Forest Classifier"""

import seaborn as sns

sns.countplot(x='RiskLevel', data=maternal_df)
plt.xlabel('Risk Level')
plt.ylabel('Count')
plt.title('Distribution of Risk Levels')
plt.show()

X = maternal_df[['SystolicBP', 'DiastolicBP', 'BS', 'BodyTemp', 'HeartRate']]
y = maternal_df['RiskLevel']

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

from sklearn.metrics import accuracy_score, confusion_matrix

accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

print("Accuracy:", accuracy)
print("Confusion Matrix:\n", conf_matrix)

cmap = sns.light_palette("#FFB6C1", as_cmap=True)

plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, cmap=cmap, fmt='d', cbar=False)
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix')
plt.show()

"""# Predicition One (2): Logistic Regression"""

from sklearn.linear_model import LogisticRegression

X = maternal_df[['SystolicBP', 'DiastolicBP', 'BS', 'BodyTemp', 'HeartRate']]
y = maternal_df['RiskLevel']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

logreg_model = LogisticRegression()
logreg_model.fit(X_train, y_train)

y_pred_logreg = logreg_model.predict(X_test)

accuracy_logreg = accuracy_score(y_test, y_pred_logreg)

conf_matrix_logreg = confusion_matrix(y_test, y_pred_logreg)

plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix_logreg, annot=True, cmap=cmap, fmt='d', cbar=False)
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix (Logistic Regression)')
plt.show()

print("Accuracy (Logistic Regression):", accuracy_logreg)

"""# Prediction Two (1): Linear Regression"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

X = maternal_df[['Age', 'SystolicBP', 'DiastolicBP', 'BodyTemp', 'HeartRate']]
y = maternal_df['BS']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

regression_model = LinearRegression()
regression_model.fit(X_train, y_train)

y_pred_regression = regression_model.predict(X_test)

mse = mean_squared_error(y_test, y_pred_regression)

print("Mean Squared Error:", mse)

"""# Prediction Two (2): Gradient Boosting"""

from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error

X = maternal_df[['Age', 'SystolicBP', 'DiastolicBP', 'BodyTemp', 'HeartRate']]
y = maternal_df['BS']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

gb_model = GradientBoostingRegressor()
gb_model.fit(X_train, y_train)

y_pred_gb = gb_model.predict(X_test)

mse_gb = mean_squared_error(y_test, y_pred_gb)

print("Mean Squared Error (Gradient Boosting):", mse_gb)

"""# Prediction Two (3): Random Forest Regression"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

X = maternal_df[['Age', 'SystolicBP', 'DiastolicBP', 'BodyTemp', 'HeartRate']]
y = maternal_df['BS']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

rf_model = RandomForestRegressor()
rf_model.fit(X_train, y_train)

y_pred_rf = rf_model.predict(X_test)

mse_rf = mean_squared_error(y_test, y_pred_rf)

print("Mean Squared Error (Random Forest):", mse_rf)

"""# Prediction Two (4): Support Vector Machine"""

from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler

X = maternal_df[['Age', 'SystolicBP', 'DiastolicBP', 'BodyTemp', 'HeartRate']]
y = maternal_df['BS']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

svr_model = SVR()
svr_model.fit(X_train, y_train)

y_pred_svr = svr_model.predict(X_test)

mse_svr = mean_squared_error(y_test, y_pred_svr)

print("Mean Squared Error (Support Vector Regression):", mse_svr)

"""# Prediction Two (5): Random Forest Classifier

# New Section
"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.model_selection import train_test_split

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.model_selection import train_test_split

# Define predictors and target
X = maternal_df[['Age', 'DiastolicBP', 'BodyTemp', 'BS', 'HeartRate']]
y = maternal_df['RiskLevel']

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Random Forest Classifier model
rf_classifier = RandomForestClassifier()
rf_classifier.fit(X_train, y_train)

# Make predictions
y_pred_rf = rf_classifier.predict(X_test)

# Calculate accuracy score
accuracy_rf = accuracy_score(y_test, y_pred_rf)

# Confusion matrix
conf_matrix_rf = confusion_matrix(y_test, y_pred_rf)

print("Accuracy (Random Forest Classifier):", accuracy_rf)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Splitting the data into predictors (X) and target variable (y)
X = maternal_df[['Age', 'SystolicBP', 'DiastolicBP', 'BS', 'BodyTemp', 'HeartRate']]
y = maternal_df['RiskLevel']

# Splitting the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Creating and training the logistic regression model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Making predictions on the testing data
predictions = model.predict(X_test)

# Calculating the accuracy score
accuracy = accuracy_score(y_test, predictions)
print("Accuracy:", accuracy)